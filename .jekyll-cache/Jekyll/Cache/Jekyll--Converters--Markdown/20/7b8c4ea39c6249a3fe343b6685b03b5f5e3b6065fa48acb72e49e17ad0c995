I"n,<h2 id="0x00-前言">0x00 前言</h2>
<hr />

<p>在上一篇文章<a href="https://3gstudent.github.io/Zimbra-SOAP-API%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97">《Zimbra-SOAP-API开发指南》</a>介绍了Zimbra SOAP API的调用方法，开源代码<a href="https://github.com/3gstudent/Homework-of-Python/blob/master/Zimbra_SOAP_API_Manage.py">Zimbra_SOAP_API_Manage</a>。
本文将要在此基础上扩充功能，添加使用管理员权限可以实现的功能。</p>

<h2 id="0x01-简介">0x01 简介</h2>
<hr />

<p>本文将要介绍以下内容：</p>

<ul>
  <li>获得指定邮箱用户的token</li>
  <li>通过clientUploader插件向服务器上传文件</li>
  <li>日志检测</li>
</ul>

<h2 id="0x02-获得指定邮箱用户的token">0x02 获得指定邮箱用户的token</h2>
<hr />

<p>说明文档：https://files.zimbra.com/docs/soap_api/8.8.15/api-reference/zimbraAdmin/DelegateAuth.html</p>

<p>对应命名空间为<code class="language-plaintext highlighter-rouge">zimbraAdmin</code></p>

<p>请求的地址为：<code class="language-plaintext highlighter-rouge">uri+":7071/service/admin/soap"</code></p>

<p>根据说明文档中的SOAP格式，可通过以下Python代码实现：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def gettoken_request(uri,token):
    print("[*] Input the mailbox:")
    mail = input("[&gt;]: ")
    request_body="""&lt;soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope"&gt;
       &lt;soap:Header&gt;
           &lt;context xmlns="urn:zimbra"&gt;
               &lt;authToken&gt;{token}&lt;/authToken&gt;
           &lt;/context&gt;
       &lt;/soap:Header&gt;
       &lt;soap:Body&gt;
         &lt;DelegateAuthRequest xmlns="urn:zimbraAdmin"&gt;
            &lt;account by="name"&gt;{mail}&lt;/account&gt;        
         &lt;/DelegateAuthRequest&gt;
       &lt;/soap:Body&gt;
    &lt;/soap:Envelope&gt;
    """    
    try:
        print("[*] Try to get the token")
        r=requests.post(uri+":7071/service/admin/soap",data=request_body.format(token=token,mail=mail),verify=False,timeout=15)
        if 'authToken' in r.text:
            pattern_token = re.compile(r"&lt;authToken&gt;(.*?)&lt;/authToken&gt;")
            token = pattern_token.findall(r.text)
            print("[+] authTOken:%s"%(token[0]))
    except Exception as e:
        print("[!] Error:%s"%(e))
        exit(0)
</code></pre></div></div>

<p>返回的结果如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope"&gt;&lt;soap:Header&gt;&lt;context xmlns="urn:zimbra"/&gt;&lt;/soap:Header&gt;&lt;soap:Body&gt;&lt;DelegateAuthResponse xmlns="urn:zimbraAdmin"&gt;&lt;authToken&gt;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&lt;/authToken&gt;&lt;lifetime&gt;3600000&lt;/lifetime&gt;&lt;/DelegateAuthResponse&gt;&lt;/soap:Body&gt;&lt;/soap:Envelope&gt;
</code></pre></div></div>

<p>提取出<code class="language-plaintext highlighter-rouge">authToken</code>值可以用于邮箱登录，登录方法如下：</p>

<p>进入Zimbra邮箱登录的Web页面，添加以下Cookie信息：</p>

<p>Name：<code class="language-plaintext highlighter-rouge">ZM_AUTH_TOKEN</code>
Value：<code class="language-plaintext highlighter-rouge">XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</code></p>

<p>在登录页面输入邮箱用户名称，不需要输入口令，点击登录</p>

<p>Chrome浏览器添加Cookie的方法：</p>

<p>在Chrome浏览器中按下<code class="language-plaintext highlighter-rouge">F12</code>，开启开发者工具，选择<code class="language-plaintext highlighter-rouge">Application</code>标签</p>

<p>依次打开<code class="language-plaintext highlighter-rouge">Storage</code>-&gt;<code class="language-plaintext highlighter-rouge">Cookies</code></p>

<h2 id="0x03-通过clientuploader插件向服务器上传文件">0x03 通过clientUploader插件向服务器上传文件</h2>
<hr />

<p>这里需要注意上传文件的操作需要在请求头(Request Headers)中设置<code class="language-plaintext highlighter-rouge">Content-Type</code>为<code class="language-plaintext highlighter-rouge">multipart/form-data; boundary=${boundary}</code>，格式示例：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Content-Type: multipart/form-data; boundary=----WebKitFormBoundary1abcdefghijklmno
</code></pre></div></div>

<p>完整的数据包格式示例：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POST /service/extension/clientUploader/upload HTTP/1.1
Host: mail.xx.com
Proxy-Connection: keep-alive
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.9
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary1abcdefghijklmno
Content-Length: 400
Cookie:ZM_ADMIN_AUTH_TOKEN=0_530bf417d0f3e55ed628e4671e44b1dea4652bab_69643d33363a65306661666438392d313336302d313164392d383636312d3030306139356439386566323b6578703d31333a313535343835323934303131393b61646d696e3d313a313b
Upgrade-Insecure-Requests:1

------WebKitFormBoundary1abcdefghijklmno
Content-Disposition:form-data;name="file";filename="test.jsp"
Content-Type: image/jpeg

test12345
------WebKitFormBoundary1abcdefghijklmno--
</code></pre></div></div>

<p>其中，<code class="language-plaintext highlighter-rouge">------WebKitFormBoundary1abcdefghijklmno</code>为分隔符，<code class="language-plaintext highlighter-rouge">------WebKitFormBoundary1abcdefghijklmno--</code>为结束符</p>

<p>如果未设置该属性，上传文件的操作会会失败，返回结果如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body onload="window.parent._uploadManager.loaded(20000001,'null');"&gt;The request does not upload a file&lt;/body&gt;&lt;/html&gt;
</code></pre></div></div>

<p>在Python脚本的编写过程中，如果直接在Headers中加入属性：<code class="language-plaintext highlighter-rouge">Content-Type: multipart/form-data; boundary=----WebKitFormBoundary1abcdefghijklmno</code>，示例代码如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>headers["Content-Type"]="multipart/form-data; boundary=----WebKitFormBoundary1abcdefghijklmno"
</code></pre></div></div>

<p>这样会产生bug，无法成功</p>

<p>此时的数据包格式如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POST /service/extension/clientUploader/upload HTTP/1.1
Host: mail.xx.com
Proxy-Connection: keep-alive
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.9
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary1abcdefghijklmno
Content-Length: 400
Cookie:ZM_ADMIN_AUTH_TOKEN=0_530bf417d0f3e55ed628e4671e44b1dea4652bab_69643d33363a65306661666438392d313336302d313164392d383636312d3030306139356439386566323b6578703d31333a313535343835323934303131393b61646d696e3d313a313b
Upgrade-Insecure-Requests:1

------3c4bc2fbc2368a87e5def7b234fd126b
Content-Disposition:form-data;name="file";filename="test.jsp"
Content-Type: image/jpeg

test12345
------3c4bc2fbc2368a87e5def7b234fd126b--
</code></pre></div></div>

<p>发现分隔符和结束符为重新随机生成的数值，而不是我们在请求头(Request Headers)中设置的<code class="language-plaintext highlighter-rouge">----WebKitFormBoundary1abcdefghijklmno</code></p>

<p>所以Python代码需要做修改，这里给出一种解决方法：使用<code class="language-plaintext highlighter-rouge">requests_toolbelt</code>库</p>

<p>代码示例：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    fileContent = 0;
    path = input("[*] Input the path of the file:")
    with open(path,'r') as f:
        fileContent = f.read()
    filename = path
    print("[*] filepath:"+path)
    print("[*] filedata:"+fileContent)

    headers = {
    "Content-Type":"application/xml"
    }   
    headers["Content-Type"]="multipart/form-data; boundary=----WebKitFormBoundary1abcdefghijklmno"
    headers["Cookie"]="ZM_ADMIN_AUTH_TOKEN="+token+";"

    m = MultipartEncoder(fields={
    'filename1':(None,"test",None),
    'clientFile':(filename,fileContent,"image/jpeg"),
    'requestId':(None,"12345",None),
    }, boundary = '----WebKitFormBoundary1abcdefghijklmno')

    r = requests.post(uri+"/service/extension/clientUploader/upload",data=m,headers=headers,verify=False)
    if 'window.parent._uploadManager.loaded(1,' in r.text:
        print("[+] Upload Success!")
        print("[+] URL:%s/downloads/%s"%(uri,filename))
    else:
        print("[!]")
        print(r.text)  
        exit(0)
</code></pre></div></div>

<p>上传成功后，路径为<code class="language-plaintext highlighter-rouge">downloads</code>目录，经过验证的用户才能访问</p>

<h2 id="0x04-开源代码">0x04 开源代码</h2>
<hr />

<p>新的代码已上传至github，地址如下：</p>

<p>https://github.com/3gstudent/Homework-of-Python/blob/master/Zimbra_SOAP_API_Manage.py</p>

<p>增加了以下两个功能：</p>

<ul>
  <li>Gettoken</li>
  <li>upload</li>
</ul>

<p>同时增加了对CVE-2019-9621 SSRF漏洞的支持，在邮件服务器关闭了7071管理端口的情况下，通过SSRF漏洞实现对管理资源的访问。</p>

<h2 id="0x05-日志检测">0x05 日志检测</h2>
<hr />

<p>登录日志的位置为<code class="language-plaintext highlighter-rouge">/opt/zimbra/log/mailbox.log</code></p>

<p>其他种类的邮件日志可参考https://wiki.zimbra.com/wiki/Log_Files</p>

<h2 id="0x06-小结">0x06 小结</h2>
<hr />

<p>本文扩充了Zimbra SOAP API的调用方法，添加两个实用功能：获得指定邮箱用户的token和通过clientUploader插件向服务器上传文件，记录实现细节。</p>

<hr />

<p><a href="https://github.com/3gstudent/feedback/issues/new">LEAVE A REPLY</a></p>

:ET