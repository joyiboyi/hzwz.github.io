I"j8<h2 id="0x00-前言">0x00 前言</h2>
<hr />

<p>在域环境中，域用户的凭据是十分重要的信息。为了增强安全性，域组策略会设置所有域用户口令的最长有效时间，到达过期时间后强制用户更改口令。</p>

<p>在实际环境中，有些域用户需要设置为密码永不过期，这可以通过添加密码永不过期属性来实现。</p>

<p>在域渗透中，我们需要枚举出具有密码永不过期属性的域用户，也需要能够将某个域用户设置为密码永不过期。</p>

<p>相对的站在防御角度，我们需要尽可能减少具有密码永不过期属性的域用户，也需要能够实时掌握这个域用户列表。</p>

<p>所以本文将会介绍不同条件下多种枚举、添加和删除密码永不过期属性的方法，分析原理，开源代码。</p>

<h2 id="0x01-简介">0x01 简介</h2>
<hr />

<p>本文将要介绍以下内容：</p>

<ul>
  <li>实现原理</li>
  <li>枚举密码设置为永不过期的用户</li>
  <li>向指定用户添加密码永不过期属性的方法</li>
  <li>向指定用户删除密码永不过期属性的方法</li>
</ul>

<h2 id="0x02-实现原理">0x02 实现原理</h2>
<hr />

<p>域用户的密码永不过期属性保存在域用户的<code class="language-plaintext highlighter-rouge">userAccountControl</code>属性中</p>

<p>userAccountControl属性使用数字表示，数值是多个具体属性数值的总和</p>

<p>每个具体属性对应一个不同的数值，具体的数值可参考：https://support.microsoft.com/en-us/help/305144/how-to-use-useraccountcontrol-to-manipulate-user-account-properties</p>

<p>下面举例进行说明：</p>

<p>用户test1的userAccountControl属性值为514，那么这个用户的具体属性如下：</p>

<ul>
  <li>ACCOUNTDISABLE，2</li>
  <li>NORMAL_ACCOUNT，512</li>
</ul>

<p>计算方法为2+512=514</p>

<h4 id="添加密码永不过期属性的方法">添加密码永不过期属性的方法：</h4>

<p>密码永不过期属性对应的值为65536(DONT_EXPIRE_PASSWORD)，将userAccountControl属性值514再加上65536，设置为66048即可</p>

<p><strong>注：</strong></p>

<p>在程序设计上，为了可重复使用，采用的方法是同65536作按位或运算(<code class="language-plaintext highlighter-rouge">运算符|</code>)</p>

<p>按位或运算的运算规则：参加运算的两个数，按二进制位进行或运算，只要对应的二进位有一个为1时，结果位就为1，否则为0</p>

<h4 id="删除密码永不过期属性的方法">删除密码永不过期属性的方法：</h4>

<p>将userAccountControl属性值减去65536即可</p>

<p><strong>注：</strong></p>

<p>在程序设计上，为了可重复使用，采用的方法是同65536作按位异或运算(<code class="language-plaintext highlighter-rouge">运算符^</code>)</p>

<p>按位异或运算的运算规则：参加运算的两个数，按二进制位进行”异或”运算，如果两个相应位相同，则结果为0，否则为1</p>

<h4 id="查看密码永不过期属性的方法">查看密码永不过期属性的方法：</h4>

<p>userAccountControl属性值是各个数值的总和，我们无法通过简单的加减法计算出userAccountControl属性值是否包括65536这个被加数</p>

<p>这里可以通过按位与运算(<code class="language-plaintext highlighter-rouge">运算符&amp;</code>)来实现</p>

<p>按位与运算的运算规则：参加运算的两个数，按二进制位进行”与”运算，只有两个数的二进制同时为1，结果才为1，否则为0</p>

<h4 id="查看密码永不过期属性的计算方法">查看密码永不过期属性的计算方法：</h4>

<p>将userAccountControl属性值同65536做按位与运算，如果结果为65536，那么代表具有密码永不过期的属性</p>

<h2 id="0x03-枚举密码设置为永不过期的用户">0x03 枚举密码设置为永不过期的用户</h2>
<hr />

<p>我们在域控制器上，通过<code class="language-plaintext highlighter-rouge">Active Directory Users and Computers</code>查看每个域用户的<code class="language-plaintext highlighter-rouge">Account</code>属性，可以看到用户是否设置为密码永不过期，如下图</p>

<p><img src="https://raw.githubusercontent.com/3gstudent/BlogPic/master/2020-7-21/2-1.png" alt="Alt text" /></p>

<p>下面介绍不同环境下的枚举方法</p>

<h3 id="1从域内进行枚举的方法">1.从域内进行枚举的方法</h3>

<h4 id="1windows系统使用powershell-activedirectory模块">(1)Windows系统使用Powershell ActiveDirectory模块</h4>

<p>命令示例：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Import-Module ActiveDirectory
Search-ADAccount -PasswordNeverExpires | FT Name
</code></pre></div></div>

<p>或者：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Import-Module ActiveDirectory
Get-ADUser -filter * -properties Name, PasswordNeverExpires | where {$_.passwordNeverExpires -eq "true" }| FT Name
</code></pre></div></div>

<h4 id="2windows系统使用powerview">(2)Windows系统使用PowerView</h4>

<p>https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1</p>

<p>命令示例：</p>

<p>显示出指定用户的属性:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import-module .\PowerView.ps1
Get-NetUser test1| select useraccountcontrol | ConvertFrom-UACValue
</code></pre></div></div>

<p>如下图</p>

<p><img src="https://raw.githubusercontent.com/3gstudent/BlogPic/master/2020-7-21/2-2.png" alt="Alt text" /></p>

<p>筛选出符合条件的所有用户：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import-module .\PowerView.ps1
ForEach($User in (Get-NetUser))
{
	if(($User.useraccountcontrol -band 65536) -eq 65536)
	{
		Write-Output $User.samaccountname
	}		
}
</code></pre></div></div>

<h4 id="3windows系统使用c实现">(3)Windows系统使用C#实现</h4>

<p>使用命名空间<code class="language-plaintext highlighter-rouge">System.DirectoryServices</code>，详细代码已上传至github，地址如下：</p>

<p>https://github.com/3gstudent/Homework-of-C-Sharp/blob/master/List_passwordneverexpires_user_byLDAP.cs</p>

<p>如果使用当前用户的凭据，需要将代码<code class="language-plaintext highlighter-rouge">DirectoryEntry de = new DirectoryEntry("LDAP://" + args[0],args[1],args[2]);</code>替换为<code class="language-plaintext highlighter-rouge">DirectoryEntry de = new DirectoryEntry("LDAP://" + args[0]);</code></p>

<p>测试如下图</p>

<p><img src="https://raw.githubusercontent.com/3gstudent/BlogPic/master/2020-7-21/2-3.png" alt="Alt text" /></p>

<h4 id="4kali系统通过ldapsearch枚举">(4)Kali系统通过ldapsearch枚举</h4>

<p>命令示例：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ldapsearch -x -H ldap://192.168.1.1:389 -D "CN=testa,CN=Users,DC=test,DC=com" -w DomainPassword123! -b "DC=test,DC=com" "(&amp;(objectClass=user)(objectCategory=person))" grep userAccountControl
</code></pre></div></div>

<p>测试如下图</p>

<p><img src="https://raw.githubusercontent.com/3gstudent/BlogPic/master/2020-7-21/2-4.png" alt="Alt text" /></p>

<p>获取userAccountControl属性值后再同65536做按位与运算，获得最终结果</p>

<h3 id="2从域外进行枚举的方法">2.从域外进行枚举的方法</h3>

<h4 id="1windows系统使用powershell-activedirectory模块-1">(1)Windows系统使用Powershell ActiveDirectory模块</h4>

<p>命令示例：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import-module .\Microsoft.ActiveDirectory.Management.dll
$uname="test1"
$pwd=ConvertTo-SecureString "DomainPassword123!" -AsPlainText –Force
$cred=New-Object System.Management.Automation.PSCredential($uname,$pwd)
Search-ADAccount -Server 192.168.1.1 -Credential $cred -Verbose -PasswordNeverExpires | FT Name
</code></pre></div></div>

<p>或者：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import-module .\Microsoft.ActiveDirectory.Management.dll
$uname="test1"
$pwd=ConvertTo-SecureString "DomainPassword123!" -AsPlainText –Force
$cred=New-Object System.Management.Automation.PSCredential($uname,$pwd)
Get-ADUser -Server 192.168.1.1 -Credential $cred -filter * -properties Name, PasswordNeverExpires | where {$_.passwordNeverExpires -eq "true" }| FT Name
</code></pre></div></div>

<p><strong>注：</strong></p>

<p>域控制器默认安装ActiveDirectory模块，Microsoft.ActiveDirectory.Management.dll在安装powershell模块Active Directory后生成，我已经提取出来并上传至github：</p>

<p>https://github.com/3gstudent/test/blob/master/Microsoft.ActiveDirectory.Management.dll</p>

<p>对于未安装Active Directory模块的系统，可以通过如下命令导入Active Directory模块：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import-module .\Microsoft.ActiveDirectory.Management.dll
</code></pre></div></div>

<h4 id="2windows系统使用powerview-1">(2)Windows系统使用PowerView</h4>

<p>https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1</p>

<p>命令示例：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import-module .\PowerView.ps1
$uname="test1"
$pwd=ConvertTo-SecureString "DomainPassword123!" -AsPlainText –Force
$cred=New-Object System.Management.Automation.PSCredential($uname,$pwd)
$Users=Get-NetUser -Domain "test.com" -DomainController 192.168.1.1 -Credential $cred
ForEach($User in $Users)
{
	if(($User.useraccountcontrol -band 65536) -eq 65536)
	{
		Write-Output $User.samaccountname
	}		
}
</code></pre></div></div>

<h4 id="3windows系统使用c实现-1">(3)Windows系统使用C#实现</h4>

<p>使用命名空间System.DirectoryServices，详细代码已上传至github，地址如下：</p>

<p>https://github.com/3gstudent/Homework-of-C-Sharp/blob/master/List_passwordneverexpires_user_byLDAP.cs</p>

<h2 id="0x04-向指定用户添加密码永不过期属性的方法">0x04 向指定用户添加密码永不过期属性的方法</h2>
<hr />

<p>有以下两种实现方法：</p>

<p>1.userAccountControl属性值同65536作按位或运算(<code class="language-plaintext highlighter-rouge">运算符|</code>)
2.userAccountControl属性值直接加上65536</p>

<p>为了能够重复使用，以下方法均使用同65536作按位或运算的方法实现</p>

<h3 id="1从域内实现">1.从域内实现</h3>

<h4 id="1使用dsmod命令">(1)使用dsmod命令</h4>

<p>命令实例：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dsmod user "CN=testc,CN=Users,DC=test,DC=com" -pwdneverexpires yes
</code></pre></div></div>

<h4 id="2使用powershell-activedirectory模块">(2)使用Powershell ActiveDirectory模块</h4>

<p>命令实例：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Set-ADUser -Identity testc -PasswordNeverExpires $true
</code></pre></div></div>

<h4 id="3使用powerview">(3)使用PowerView</h4>

<p>命令实例：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Set-ADObject -SamAccountName testc -PropertyName useraccountcontrol -PropertyXorValue 65536
</code></pre></div></div>

<h4 id="4c实现">(4)C#实现</h4>

<p>使用命名空间System.DirectoryServices，详细代码已上传至github，地址如下：</p>

<p>https://github.com/3gstudent/Homework-of-C-Sharp/blob/master/Add_passwordneverexpires_user_byLDAP.cs</p>

<h3 id="2从域外实现">2.从域外实现</h3>

<h4 id="1使用powershell-activedirectory模块">(1)使用Powershell ActiveDirectory模块</h4>

<p>命令实例：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import-module .\Microsoft.ActiveDirectory.Management.dll
$uname="administrator"
$pwd=ConvertTo-SecureString "DomainPassword123!" -AsPlainText –Force
$cred=New-Object System.Management.Automation.PSCredential($uname,$pwd)
Set-ADUser -Server 192.168.1.1 -Credential $cred -Identity testc -PasswordNeverExpires $true
</code></pre></div></div>

<h4 id="2使用powerview">(2)使用PowerView</h4>

<p>命令实例：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$uname="administrator"
$pwd=ConvertTo-SecureString "DomainPassword123!" -AsPlainText –Force
$cred=New-Object System.Management.Automation.PSCredential($uname,$pwd)
$Users=Get-NetUser -Domain "test.com" -DomainController 192.168.1.1 -Credential $cred
Set-ADObject -Domain "test.com" -DomainController 192.168.1.1 -Credential $cred -SamAccountName testc -PropertyName useraccountcontrol -PropertyXorValue 65536
</code></pre></div></div>

<h4 id="3c实现">(3)C#实现</h4>

<p>使用命名空间<code class="language-plaintext highlighter-rouge">System.DirectoryServices</code>，详细代码已上传至github，地址如下：</p>

<p>https://github.com/3gstudent/Homework-of-C-Sharp/blob/master/Add_passwordneverexpires_user_byLDAP.cs</p>

<p>测试如下图</p>

<p><img src="https://raw.githubusercontent.com/3gstudent/BlogPic/master/2020-7-21/3-1.png" alt="Alt text" /></p>

<h2 id="0x05-向指定用户删除密码永不过期属性的方法">0x05 向指定用户删除密码永不过期属性的方法</h2>
<hr />

<p>有以下两种实现方法：</p>

<p>1.userAccountControl属性值同65536作按位异或运算(<code class="language-plaintext highlighter-rouge">运算符^</code>)
2.userAccountControl属性值直接减去65536</p>

<p>具体方法同0x04类似，不再重复介绍</p>

<h2 id="0x06-小结">0x06 小结</h2>
<hr />

<p>本文介绍了域用户具有密码永不过期属性的特征，分析枚举、添加和删除属性的原理，介绍不同条件下的多种实现方法，开源c#实现代码。</p>

<hr />

<p><a href="https://github.com/3gstudent/feedback/issues/new">LEAVE A REPLY</a></p>

:ET